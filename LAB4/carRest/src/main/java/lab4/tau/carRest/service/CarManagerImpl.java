package lab4.tau.carRest.service;

import org.springframework.stereotype.Component;
import lab4.tau.carRest.domain.Car;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

/**
 * Created by tp on 24.04.17.
 */
@Component
public class CarManagerImpl implements  CarManager {

    private Connection connection;
    private PreparedStatement addCarStatement;
    private PreparedStatement getAllCarsStatement;
    private PreparedStatement deleteCarStatement;
    private PreparedStatement getCarStatement;
    private PreparedStatement updateCarStatement;
	private PreparedStatement deleteAllCarsStatement;

    public CarManagerImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }
        setConnection(connection);
    }

    public CarManagerImpl() throws SQLException {
        this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
        if (!isDatabaseReady()) {
            createTables();
        }
        this.setConnection(this.connection);
    }

    public void createTables() throws SQLException {
        connection.createStatement()
                .executeUpdate("CREATE TABLE " + "Car(" +
                        "id bigint GENERATED BY DEFAULT AS IDENTITY, " +
                        "model varchar(20) NOT NULL, " +
                        "brand varchar(20) NOT NULL, " +
                        "body varchar(20) NOT NULL, " +
                        "dateOfProduction integer)");
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Car".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addCarStatement = connection.prepareStatement(
                "INSERT INTO Car (model, brand, body, dateOfProduction ) VALUES (?, ?, ?, ?)",
                Statement.RETURN_GENERATED_KEYS);
        deleteCarStatement = connection.prepareStatement("DELETE FROM Car where id = ?");
        deleteAllCarsStatement = connection.prepareStatement("DELETE FROM Car");
        getAllCarsStatement = connection.prepareStatement("SELECT id, model, brand, body, dateOfProduction FROM Car ORDER BY id");
        getCarStatement = connection.prepareStatement("SELECT id, model, brand, body, dateOfProduction FROM Car WHERE id = ?");
        updateCarStatement = connection.prepareStatement("UPDATE Car SET model=?, brand=?, body=?, dateOfProduction=? WHERE id = ?");
    }

    @Override
    public int addCar(Car car) {
        int count = 0;
        try {
            addCarStatement.setString(1, car.getModel());
            addCarStatement.setString(2, car.getBrand());
            addCarStatement.setString(3, car.getBody());
            addCarStatement.setInt(4, car.getDateOfProduction());
            count = addCarStatement.executeUpdate();
            ResultSet generatedKeys = addCarStatement.getGeneratedKeys();
            if (generatedKeys.next()) {
                car.setId(generatedKeys.getLong(1));
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    public List<Car> getAllCars() {
        List<Car> cars = new LinkedList<>();
        try {
            ResultSet rs = getAllCarsStatement.executeQuery();

            while (rs.next()) {
                Car car = new Car();
                car.setId(rs.getInt("id"));
                car.setModel(rs.getString("model"));
                car.setBrand(rs.getString("brand"));
                car.setBody(rs.getString("body"));
                car.setDateOfProduction(rs.getInt("dateOfProduction"));
                cars.add(car);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return cars;
    }

    @Override
    public int deleteCar(Car car) {
        try {
            deleteCarStatement.setLong(1, car.getId());
            return deleteCarStatement.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }

    @Override
    public int updateCar(Car car) throws SQLException {
        int count = 0;
        try {
            updateCarStatement.setString(1, car.getModel());
            updateCarStatement.setString(2, car.getBrand());
            updateCarStatement.setString(3, car.getBody());
            updateCarStatement.setInt(4, car.getDateOfProduction());
            updateCarStatement.setLong(5, car.getId());
            count = updateCarStatement.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        if (count <= 0)
            throw new SQLException("Cars not found for an update");
        return count;
    }

    @Override
    public Car getCar(long id) throws SQLException {
        try {
            getCarStatement.setLong(1, id);
            ResultSet rs = getCarStatement.executeQuery();

            if (rs.next()) {
                Car car = new Car();
                car.setId(rs.getInt("id"));
                car.setModel(rs.getString("model"));
                car.setBrand(rs.getString("brand"));
                car.setBody(rs.getString("body"));
                car.setDateOfProduction(rs.getInt("dateOfProduction"));
                return car;
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        throw new SQLException("Car with id " + id + " does not exist");
    }

    @Override
    public String introduceSelf() {
        return null;
    }

    @Override
    public int deleteAllCars() {
        try {
            return deleteAllCarsStatement.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }
}
